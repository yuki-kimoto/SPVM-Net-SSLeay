class TestUtil::Socket extends IO::Socket::IP  {
  
  use Sys::Socket::Errno;
  use Sys::Socket::Sockaddr;
  use Net::SSLeay::Constant as SSL;
  
  use TestUtil::Socket::Callback::BeforeConnectSSL;
  use TestUtil::Socket::Callback::BeforeAcceptSSL;
  
  # Fields
  has ssl_ctx : ro Net::SSLeay::SSL_CTX;
  
  has ssl : ro Net::SSLeay;
  
  has before_connect_SSL_cbs_list : ro List of TestUtil::Socket::Callback::BeforeConnectSSL;
  
  has before_accept_SSL_cbs_list : ro List of TestUtil::Socket::Callback::BeforeAcceptSSL;
  
  # Class Methods
  static method new : TestUtil::Socket ($options : object[] = undef) {
    
    my $self = new TestUtil::Socket;
    
    $self->init($options);
    
    $self->configure;
    
    return $self;
  }
  
  # Instance Methods
  protected method configure : void () {
    
    $self->SUPER::configure;
    
    $self->configure_SSL;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $self->SUPER::init($options);
    
    $self->{before_connect_SSL_cbs_list} = List->new(new TestUtil::Socket::Callback::BeforeConnectSSL[0]);
    
    $self->{before_accept_SSL_cbs_list} = List->new(new TestUtil::Socket::Callback::BeforeAcceptSSL[0]);
    
  }
  
  protected method configure_SSL : void () {
    
    my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
    
    my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
    
    $self->{ssl_ctx} = $ssl_ctx;
  }
  
  method connect_SSL : void () {
    
    my $timeout = $self->{Timeout};
    
    my $fd = $self->{FD};
    
    my $ssl_ctx = $self->{ssl_ctx};
    
    my $ssl = Net::SSLeay->new($ssl_ctx);
    
    $ssl->set_fd($fd);
    
    my $before_connect_SSL_cbs_list = $self->{before_connect_SSL_cbs_list};
    my $before_connect_SSL_cbs_length = $before_connect_SSL_cbs_list->length;
    for (my $i = 0; $i < $before_connect_SSL_cbs_length; $i++) {
      my $cb = (TestUtil::Socket::Callback::BeforeConnectSSL)$before_connect_SSL_cbs_list->get($i);
      $cb->($self, $ssl);
    }
    
    while (1) {
      eval { $ssl->connect; }
      
      if ($@) {
        my $again_read = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_READ;
        
        my $again_write = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_WRITE;
        
        if ($again_read) {
          Go->gosched_io_read($fd, $timeout);
          next;
        }
        elsif ($again_write) {
          Go->gosched_io_write($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    $self->{ssl} = $ssl;
    
  }
  
  method accept : TestUtil::Socket ($peer_ref : Sys::Socket::Sockaddr[] = undef) {
    
    my $client_socket = (TestUtil::Socket)$self->SUPER::accept($peer_ref);
    
    $client_socket->{ssl_ctx} = $self->{ssl_ctx};
    
    return $client_socket;
  }
  
  method accept_SSL : void () {
    
    my $fd = $self->{FD};
    
    my $timeout = $self->{Timeout};
    
    my $ssl_ctx = $self->{ssl_ctx};
    
    my $ssl = Net::SSLeay->new($ssl_ctx);
    
    $ssl->set_fd($fd);
    
    my $before_accept_SSL_cbs_list = $self->{before_accept_SSL_cbs_list};
    my $before_accept_SSL_cbs_length = $before_accept_SSL_cbs_list->length;
    for (my $i = 0; $i < $before_accept_SSL_cbs_length; $i++) {
      my $cb = (TestUtil::Socket::Callback::BeforeAcceptSSL)$before_accept_SSL_cbs_list->get($i);
      $cb->($self, $ssl);
    }
    
    while (1) {
      eval { $ssl->accept; }
      
      if ($@) {
        my $again_read = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_READ;
        
        my $again_write = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_WRITE;
        
        if ($again_read) {
          Go->gosched_io_read($fd, $timeout);
          next;
        }
        elsif ($again_write) {
          Go->gosched_io_write($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    $self->{ssl} = $ssl;
  }
  
  method read : int ($buffer : mutable string, $length : int = -1, $offset : int = 0) {
    
    my $ssl = $self->{ssl};
    
    my $fd = $self->{FD};
    
    my $timeout = $self->{Timeout};
    
    my $read_length = -1;
    while (1) {
      eval { $read_length = $ssl->read($buffer, $length, $offset); }
      
      if ($@) {
        my $again_read = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_READ;
        
        my $again_write = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_WRITE;
        
        if ($again_read) {
          Go->gosched_io_read($fd, $timeout);
          next;
        }
        elsif ($again_write) {
          Go->gosched_io_write($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $read_length;
  }
  
  method write : int ($buffer : string, $length : int = -1, $offset : int = 0) {
    
    my $ssl = $self->{ssl};
    
    my $fd = $self->{FD};
    
    my $timeout = $self->{Timeout};
    
    my $write_length = -1;
    while (1) {
      
      eval { $write_length = $ssl->write($buffer, $length, $offset); }
      
      if ($@) {
        my $again_read = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_READ;
        
        my $again_write = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_WRITE;
        
        if ($again_read) {
          Go->gosched_io_read($fd, $timeout);
          next;
        }
        elsif ($again_write) {
          Go->gosched_io_write($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $write_length;
  }
  
  method shutdown_SSL : int () {
    
    my $ssl = $self->{ssl};
    
    my $fd = $self->{FD};
    
    my $timeout = $self->{Timeout};
    
    my $status = -1;
    while (1) {
      
      eval { $status = $ssl->shutdown; }
      
      if ($@) {
        my $again_read = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_READ;
        
        my $again_write = eval_error_id isa_error Net::SSLeay::Error::SSL_ERROR_WANT_WRITE;
        
        if ($again_read) {
          Go->gosched_io_read($fd, $timeout);
          next;
        }
        elsif ($again_write) {
          Go->gosched_io_write($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $status;
  }
  
  method close : void () {
    
    my $ssl = $self->{ssl};
    
    if ($ssl) {
      my $listen = $self->{Listen};
      
      # Only client sockets and accpected sockets
      unless ($listen > 0) {
        $self->shutdown_SSL;
      }
    }
    
    $self->SUPER::close;
    
  }
  
  method add_before_connect_SSL_cb : void ($cb : TestUtil::Socket::Callback::BeforeConnectSSL) {
    
    my $before_connect_SSL_cbs_list = $self->{before_connect_SSL_cbs_list};
    
    $before_connect_SSL_cbs_list->push($cb);
    
  }
  
  method add_before_accept_SSL_cb : void ($cb : TestUtil::Socket::Callback::BeforeAcceptSSL) {
    
    my $before_accept_SSL_cbs_list = $self->{before_accept_SSL_cbs_list};
    
    $before_accept_SSL_cbs_list->push($cb);
    
  }
  
  method DESTROY : void () {
    $self->close;
  }

}
