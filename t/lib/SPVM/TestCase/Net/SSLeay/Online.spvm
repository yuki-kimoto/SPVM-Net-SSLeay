class TestCase::Net::SSLeay::Online {
  use IO::Socket::IP;
  use Net::SSLeay;
  use Net::SSLeay::Constant as SSL;
  use Mozilla::CA;
  use Net::SSLeay::Error;
  use Net::SSLeay::OBJ;
  use Net::SSLeay::X509;
  use Sys::OS;
  use Sys::Time::Tm;
  use Net::SSLeay::BIO;
  use FindBin;
  use Array;
  use Net::SSLeay::X509_STORE_CTX;
  
  use TestUtil::Socket;
  
  our $FILE_DIR : string;
  
  INIT {
    $FILE_DIR = FindBin->Bin . "/file";
  }
  
  static method https_google : int () {
    
    my $version = SSL->OPENSSL_VERSION_TEXT;
    
    # Socket
    my $host = "www.google.com";
    my $port = 443;
    my $socket = TestUtil::Socket->new({PeerAddr => $host, PeerPort => $port});
    
    my $ssl_ctx = $socket->ssl_ctx;
    
    $ssl_ctx->set_verify(SSL->SSL_VERIFY_PEER, method : int ($preverify_ok : int, $x509_store_ctx : Net::SSLeay::X509_STORE_CTX, $arg : object) {
      
      my $verify_ok = 1;
      
      unless ($preverify_ok) {
        $verify_ok = 0;
      }
      
      unless ($x509_store_ctx is_type Net::SSLeay::X509_STORE_CTX) {
        $verify_ok = 0;
      }
      
      unless ($arg->(int) == 1) {
        $verify_ok = 0;
      }
      
      unless ($x509_store_ctx->get_error == 0) {
        $verify_ok = 0;
      }
      
      unless ($x509_store_ctx->get_error_depth >= 0) {
        $verify_ok = 0;
      }
      
      $x509_store_ctx->set_error(1);
      
      $x509_store_ctx->set_error(0);
      
      my $current_cert = $x509_store_ctx->get_current_cert;
      
      unless ($current_cert is_type Net::SSLeay::X509) {
        $verify_ok = 0;
      }
      
      unless (length $current_cert->get_subject_name->oneline > 0) {
        $verify_ok = 0;
      }
      
      # native method get1_issuer : int ($issuer_ref : Net::SSLeay::X509[], $ctx : Net::SSLeay::X509_STORE_CTX, $x : Net::SSLeay::X509);
  
      return $verify_ok;
    }, Int->new(1));
    
    if (Sys::OS->is_windows) {
      $ssl_ctx->set_default_verify_paths_windows;
    }
    else {
      $ssl_ctx->set_default_verify_paths;
    }
    
    my $verify_param = $ssl_ctx->get0_param;
    
    $verify_param->set1_host($host);
    
    $socket->add_before_connect_SSL_cb([$host : string] method : void ($ssl : Net::SSLeay) {
      $ssl->set_tlsext_host_name($host);
    });
    
    $socket->connect_SSL;
    
    my $send_buffer = "GET / HTTP/1.0\r\n\r\n";
    $socket->write($send_buffer);
    
    my $buffer = StringBuffer->new;
    
    my $recv_buffer = (mutable string)new_string_len 100;
    while (1) {
      my $recv_length = $socket->read($recv_buffer);
      
      if ($recv_length > 0) {
        $buffer->push($recv_buffer, 0, $recv_length);
        # print $recv_buffer;
      }
      
      if ($recv_length < 0) {
        die "Read error";
      }
      
      if ($recv_length < length $recv_buffer) {
        last;
      }
    }
    
    unless (Fn->contains($buffer->to_string, "google.com")) {
      return 0;
    }
    
    return 1;
  }
  
  static method read : int ($ssl : Net::SSLeay, $fd : int, $timeout : int, $buffer : mutable string, $length : int = -1, $offset : int = 0) {
    
    my $read_length = -1;
    while (1) {
      eval { $read_length = $ssl->read($buffer, $length, $offset); }
      
      if ($@) {
        my $again = Sys::Socket::Errno->is_read_again(Sys::Socket::Errno->errno);
        
        if ($again) {
          Go->gosched_io_read($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $read_length;
  }
  
  static method https_google_with_mozilla_ca : int () {
    
    # Socket
    my $host = "www.google.com";
    my $port = 443;
    
    my $socket = TestUtil::Socket->new({PeerAddr => $host, PeerPort => $port});
    
    my $ssl_ctx = $socket->ssl_ctx;
    
    $ssl_ctx->set_verify(SSL->SSL_VERIFY_PEER);
    
    $ssl_ctx->set_default_verify_paths;
    
    my $ca = Mozilla::CA->SSL_ca;
    
    my $bio = Net::SSLeay::BIO->new;
    
    $bio->write($ca);
    
    my $x509_store = $ssl_ctx->get_cert_store;
    
    while (1) {
      my $x509 = (Net::SSLeay::X509)undef;
      
      eval { $x509 = Net::SSLeay::PEM->read_bio_X509($bio); }
      
      if ($@) {
        if (eval_error_id isa_error Net::SSLeay::Error::PEM_R_NO_START_LINE) {
          last;
        }
        else {
          die $@;
        }
      }
      
      $x509_store->add_cert($x509);
    }
    
    my $verify_param = $ssl_ctx->get0_param;
    
    $verify_param->set_hostflags(SSL->X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);
    
    $verify_param->set1_host($host);
    
    $socket->add_before_connect_SSL_cb([$host : string] method : void ($ssl : Net::SSLeay) {
      $ssl->set_tlsext_host_name($host);
    });
    
    $socket->connect_SSL;
    
    my $send_buffer = "GET / HTTP/1.0\r\n\r\n";
    $socket->write($send_buffer);
    
    my $buffer = StringBuffer->new;
    
    my $recv_buffer = (mutable string)new_string_len 100;
    while (1) {
      my $recv_length = $socket->read($recv_buffer);
      
      if ($recv_length > 0) {
        $buffer->push($recv_buffer, 0, $recv_length);
        # print $recv_buffer;
      }
      
      if ($recv_length < 0) {
        die "Read error";
      }
      
      if ($recv_length < length $recv_buffer) {
        last;
      }
    }
    
    unless (Fn->contains($buffer->to_string, "google.com")) {
      return 0;
    }
    
    return 1;
  }
  
}
