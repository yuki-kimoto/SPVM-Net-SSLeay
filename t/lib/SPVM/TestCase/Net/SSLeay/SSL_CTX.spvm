class TestCase::Net::SSLeay::SSL_CTX {
  
  use Net::SSLeay::SSL_CTX;
  use Array;
  
  use Net::SSLeay::SSL_METHOD;
  use Net::SSLeay::SSL_CTX;
  use Net::SSLeay::Constant as SSL;
  
  static method basic : int () {
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      unless ($ssl_ctx is_type Net::SSLeay::SSL_CTX) {
        return 0;
      }
    }
    
    # set_mode, get_mode
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      $ssl_ctx->set_mode(SSL->SSL_MODE_ENABLE_PARTIAL_WRITE);
      
      $ssl_ctx->set_mode(SSL->SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);
      
      $ssl_ctx->set_mode(SSL->SSL_MODE_AUTO_RETRY);
      
      $ssl_ctx->set_mode(SSL->SSL_MODE_RELEASE_BUFFERS);
      
      $ssl_ctx->set_mode(SSL->SSL_MODE_SEND_FALLBACK_SCSV);
      
      my $mode = $ssl_ctx->get_mode;
      
      unless ($mode & SSL->SSL_MODE_SEND_FALLBACK_SCSV) {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method new : int () {
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->SSLv23_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      unless ($ssl_ctx is_type Net::SSLeay::SSL_CTX) {
        return 0;
      }
    }
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->SSLv23_client_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      unless ($ssl_ctx is_type Net::SSLeay::SSL_CTX) {
        return 0;
      }
    }
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->SSLv23_server_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      unless ($ssl_ctx is_type Net::SSLeay::SSL_CTX) {
        return 0;
      }
    }
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      unless ($ssl_ctx is_type Net::SSLeay::SSL_CTX) {
        return 0;
      }
    }
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_client_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      unless ($ssl_ctx is_type Net::SSLeay::SSL_CTX) {
        return 0;
      }
    }
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_server_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      unless ($ssl_ctx is_type Net::SSLeay::SSL_CTX) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method set_alpn_protos_with_protocols : int () {
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      my $protocols = ["spdy/1", "http/1.1"];
      
      my $ret = $ssl_ctx->set_alpn_protos_with_protocols($protocols);
      
      # SSL_CTX_set_alpn_protos functions reverse the return value convention.
      unless ($ret == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method set_alpn_select_cb_with_protocols : int () {
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      my $protocols = ["spdy/1", "http/1.1"];
      
      $ssl_ctx->set_alpn_select_cb_with_protocols($protocols);
    }
    
    return 1;
  }
  
  static method set_next_proto_select_cb_with_protocols : int () {
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      my $protocols = ["spdy/1", "http/1.1"];
      
      $ssl_ctx->set_next_proto_select_cb_with_protocols($protocols);
    }
    
    return 1;
  }
  
  static method set_next_protos_advertised_cb_with_protocols : int () {
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
      
      my $protocols = ["spdy/1", "http/1.1"];
      
      $ssl_ctx->set_next_protos_advertised_cb_with_protocols($protocols);
    }
    
    return 1;
  }
  
}
