class TestCase::Net::SSLeay {
  use IO::Socket::IP;
  use Net::SSLeay;
  use Net::SSLeay::SSL_CTX;
  use Net::SSLeay::SSL_METHOD;
  use Net::SSLeay::Constant as SSL;
  use Net::SSLeay::ERR;
  use StringBuffer;
  use Mozilla::CA;
  use Sys::Signal::Constant as SIGNAL;
  use Net::SSLeay::Error;
  
  use Net::SSLeay::OBJ;
  use Net::SSLeay::X509;
  use Sys::OS;
  use Net::SSLeay::ASN1_ENUMERATED;
  use Net::SSLeay::ASN1_INTEGER;
  use Net::SSLeay::ASN1_STRING;
  use Net::SSLeay::ASN1_OCTET_STRING;
  use Sys::Time::Tm;
  use Net::SSLeay::ASN1_TIME;
  use Net::SSLeay::OBJ;
  use Net::SSLeay::BIO;
  use FindBin;
  use Net::SSLeay::PEM;
  use Net::SSLeay::EVP_MD;
  use Net::SSLeay::EVP;
  use Net::SSLeay::OPENSSL_INIT;
  use Net::SSLeay::OPENSSL_INIT_SETTINGS;
  use Net::SSLeay::PKCS12;
  use Net::SSLeay::DER;
  use Net::SSLeay::X509_VERIFY_PARAM;
  use Net::SSLeay::X509_NAME;
  use Net::SSLeay::X509_NAME_ENTRY;
  use Net::SSLeay::ASN1_INTEGER;
  use Net::SSLeay::ASN1_TIME;
  use Array;
  use Net::SSLeay::X509_STORE;
  
  use TestUtil::Socket;
  use Sys::Socket::Constant as SOCKET;
  
  our $FILE_DIR : string;
  
  INIT {
    $FILE_DIR = FindBin->Bin . "/file";
  }
  
  static method run_echo_server_accept_once : void ($port : int) {
    
    my $localhost = "127.0.0.1";
    
    my $server_socket = TestUtil::Socket->new({
      LocalAddr => $localhost,
      LocalPort => $port,
      Listen    => 5,
      ReuseAddr => 1,
    });
    
    my $ssl = $server_socket->ssl;
    
    my $ssl_ctx = $ssl->get_SSL_CTX;
    
    $ssl_ctx->use_PrivateKey_file("$FILE_DIR/simple-cert.key.pem");
    
    $ssl_ctx->use_certificate_file("$FILE_DIR/simple-cert.cert.pem");
    
    my $accepted_socket = $server_socket->accept;
    
    $accepted_socket->accept_SSL;
    
    while (1) {
      
      my $data = (mutable string)new_string_len 1;
      my $read_length = $accepted_socket->read($data);
      
      if ($read_length > 0) {
        if ($data eq "\0") {
          last;
        }
        
        $accepted_socket->write($data);
      }
      else {
        last;
      }
    }
  }
  
  static method accept : int ($port : int) {
    
    my $success_ref = [1];
    
    my $wg = Go::Sync::WaitGroup->new;
    
    $wg->add(2);
    
    # Run a echo server
    my $go_server_ref = [0];
    Go->go([$go_server_ref : int[], $wg : Go::Sync::WaitGroup, $port : int] method : void () {
      
      $go_server_ref->[0] = 1;
      
      &run_echo_server_accept_once($port);
      
      $wg->done;
    });
    
    # Tests
    my $go_tests_ref = [0];
    Go->go([$go_tests_ref : int[], $wg : Go::Sync::WaitGroup, $success_ref : int[], $port : int] method : void () {
      
      $go_tests_ref->[0] = 1;
      
      {
        my $host = "127.0.0.1";
        my $socket = TestUtil::Socket->new({PeerAddr => $host, PeerPort => $port});
        
        my $ssl = $socket->ssl;
        
        my $ssl_ctx = $ssl->get_SSL_CTX;
        
        $socket->connect_SSL;
        
        my $cipher = $ssl->get_cipher;
        
        unless ($cipher && !Fn->contains($cipher, "NONE")) {
          $success_ref->[0] = 0;
        }
        
        my $write_buffer = "abc";
          
        $socket->write($write_buffer);
        
        $socket->write("\0");
        
        my $string_buffer = StringBuffer->new;
        
        my $recv_buffer = (mutable string)new_string_len 1;
        
        while (1) {
          
          my $recv_length = -1;
          
          eval { $recv_length = $socket->read($recv_buffer); }
          
          if ($recv_length > 0) {
            $string_buffer->push($recv_buffer);
          }
          else {
            last;
          }
        }
        
        unless ($string_buffer->to_string eq "abc") {
          $success_ref->[0] = 0;
        }
        
        unless ($ssl->get_shutdown == SSL->SSL_RECEIVED_SHUTDOWN) {
          $success_ref->[0] = 0;
        }
        
        $socket->shutdown_SSL;
      }
      
      $wg->done;
    });
    
    Go->gosched;
    
    $wg->wait;
    
    unless ($go_server_ref->[0]) {
      return 0;
    }
    
    unless ($go_tests_ref->[0]) {
      return 0;
    }
    
    return $success_ref->[0];
  }
  
  static method ASN1_ENUMERATED : int () {
    
    my $asn1_object = Net::SSLeay::ASN1_ENUMERATED->new;
    
    unless ($asn1_object is_type Net::SSLeay::ASN1_ENUMERATED) {
      return 0;
    }
    
    $asn1_object->set_int64(Fn->LONG_MIN);
    
    unless ($asn1_object->get_int64 == Fn->LONG_MIN) {
      return 0;
    }
    
    return 1;
  }
  
  static method ASN1_INTEGER : int () {
    
    my $asn1_object = Net::SSLeay::ASN1_INTEGER->new;
    
    unless ($asn1_object is_type Net::SSLeay::ASN1_INTEGER) {
      return 0;
    }
    
    $asn1_object->set_int64(Fn->LONG_MIN);
    
    unless ($asn1_object->get_int64 == Fn->LONG_MIN) {
      return 0;
    }
    
    return 1;
  }
  
  static method ASN1_OBJECT : int () {
    
    my $asn1_object = Net::SSLeay::ASN1_OBJECT->new;
    
    unless ($asn1_object is_type Net::SSLeay::ASN1_OBJECT) {
      return 0;
    }
    
    return 1;
  }
  
  static method ASN1_STRING : int () {
    
    my $asn1_object = Net::SSLeay::ASN1_STRING->new;
    
    unless ($asn1_object is_type Net::SSLeay::ASN1_STRING) {
      return 0;
    }
    
    $asn1_object->set("abc");
    
    unless ($asn1_object->get0_data eq "abc") {
      return 0;
    }
    
    unless ($asn1_object->length == 3) {
      return 0;
    }
    
    return 1;
  }
  
  static method ASN1_OCTET_STRING : int () {
    
    my $asn1_object = Net::SSLeay::ASN1_OCTET_STRING->new;
    
    unless ($asn1_object is_type Net::SSLeay::ASN1_OCTET_STRING) {
      return 0;
    }
    
    $asn1_object->set("abc");
    
    unless ($asn1_object->get0_data eq "abc") {
      return 0;
    }
    
    unless ($asn1_object->length == 3) {
      return 0;
    }
    
    return 1;
  }
  
  static method ASN1_TIME : int () {
    
    my $asn1_object = Net::SSLeay::ASN1_TIME->new;
    
    unless ($asn1_object is_type Net::SSLeay::ASN1_TIME) {
      return 0;
    }
    
    $asn1_object->set(1);
    
    my $tm = Sys::Time::Tm->new;
    
    $asn1_object->to_tm($tm);
    
    unless ($tm->tm_year == 70) {
      return 0;
    }
    
    unless ($tm->tm_mon == 0) {
      return 0;
    }
    
    unless ($tm->tm_mday == 1) {
      return 0;
    }
    
    unless ($tm->tm_hour == 0) {
      return 0;
    }
    
    unless ($tm->tm_min == 0) {
      return 0;
    }
    
    unless ($tm->tm_sec == 1) {
      return 0;
    }
    
    my $bio = Net::SSLeay::BIO->new;
    
    $asn1_object->print($bio);
    
    my $buffer = (mutable string)new_string_len 256;
    my $read_length = $bio->read($buffer);
    Fn->shorten($buffer, $read_length);
    
    unless (Fn->contains($buffer, "1970")) {
      return 0;
    }
    
    unless (Fn->contains($buffer, "00:00:01")) {
      return 0;
    }
    
    return 1;
  }
  
  static method ASN1_GENERALIZEDTIME : int () {
    
    my $asn1_object = Net::SSLeay::ASN1_GENERALIZEDTIME->new;
    
    unless ($asn1_object is_type Net::SSLeay::ASN1_GENERALIZEDTIME) {
      return 0;
    }
    
    $asn1_object->set(1);
    
    my $bio = Net::SSLeay::BIO->new;
    
    $asn1_object->print($bio);
    
    my $buffer = (mutable string)new_string_len 256;
    my $read_length = $bio->read($buffer);
    Fn->shorten($buffer, $read_length);
    
    unless (Fn->contains($buffer, "1970")) {
      return 0;
    }
    
    unless (Fn->contains($buffer, "00:00:01")) {
      return 0;
    }
    
    return 1;
  }
  
  static method OBJ : int () {
    
    {
      my $nid = Net::SSLeay::OBJ->txt2nid("commonName");
      
      unless ($nid == SSL->NID_commonName) {
        return 0;
      }
    }
    
    {
      my $obj = Net::SSLeay::OBJ->nid2obj(SSL->NID_commonName);
      
      unless ($obj) {
        return 0;
      }
      
      my $nid = Net::SSLeay::OBJ->obj2nid($obj);
      
      unless ($nid == SSL->NID_commonName) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method SSL_METHOD : int () {
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_method;
      unless ($ssl_method is_type Net::SSLeay::SSL_METHOD) {
        return 0;
      }
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
    }
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_client_method;
      unless ($ssl_method is_type Net::SSLeay::SSL_METHOD) {
        return 0;
      }
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
    }
    
    {
      my $ssl_method = Net::SSLeay::SSL_METHOD->TLS_server_method;
      unless ($ssl_method is_type Net::SSLeay::SSL_METHOD) {
        return 0;
      }
      
      my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
    }
    
    return 1;
  }
  
  static method BIO : int () {
    
    {
      my $bio = Net::SSLeay::BIO->new;
      
      unless ($bio is_type Net::SSLeay::BIO) {
        return 0;
      }
      
      $bio->write("abc");
      
      my $buffer = (mutable string)new_string_len 3;
      my $read_length = $bio->read($buffer);
      
      unless ($read_length == 3) {
        return 0;
      }
      
      unless ($buffer eq "abc") {
        return 0;
      }
    }
    
    {
      my $bio = Net::SSLeay::BIO->new;
      
      unless ($bio is_type Net::SSLeay::BIO) {
        return 0;
      }
      
      $bio->write("abc", 2);
      
      my $buffer = (mutable string)new_string_len 3;
      my $read_length = $bio->read($buffer, 2);
      
      unless ($read_length == 2) {
        return 0;
      }
      
      unless ($buffer eq "ab\0") {
        return 0;
      }
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/simple-cert.cert.pem", "r");
      
      unless ($bio is_type Net::SSLeay::BIO) {
        return 0;
      }
      
      my $buffer = (mutable string)new_string_len 3;
      my $read_length = $bio->read($buffer, 3);
      
      unless ($read_length == 3) {
        return 0;
      }
      
      unless ($buffer eq "---") {
        return 0;
      }
    }
    return 1;
  }
  
  static method PEM : int () {
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/simple-cert.cert.pem", "r");
      
      my $x509 = Net::SSLeay::PEM->read_bio_X509($bio);
      
      unless ($x509 is_type Net::SSLeay::X509) {
        return 0;
      }
      
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/simple-cert.cert.pem", "r");
      
      while (1) {
        my $x509 = (Net::SSLeay::X509)undef;
        
        eval { $x509 = Net::SSLeay::PEM->read_bio_X509($bio); }
        
        if ($@) {
          if (eval_error_id isa_error Net::SSLeay::Error::PEM_R_NO_START_LINE) {
            last;
          }
          else {
            die $@;
          }
        }
        
        unless ($x509 is_type Net::SSLeay::X509) {
          return 0;
        }
      }
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/intermediate-ca.crl.pem", "r");
      
      my $x509_crl = Net::SSLeay::PEM->read_bio_X509_CRL($bio);
      
      unless ($x509_crl is_type Net::SSLeay::X509_CRL) {
        return 0;
      }
      
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/intermediate-ca.crl.pem", "r");
      
      while (1) {
        my $x509_crl = (Net::SSLeay::X509_CRL)undef;
        
        eval { $x509_crl = Net::SSLeay::PEM->read_bio_X509_CRL($bio); }
        
        if ($@) {
          if (eval_error_id isa_error Net::SSLeay::Error::PEM_R_NO_START_LINE) {
            last;
          }
          else {
            die $@;
          }
        }
        
        unless ($x509_crl is_type Net::SSLeay::X509_CRL) {
          return 0;
        }
      }
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/simple-cert.key.pem", "r");
      
      my $evp_pkey = Net::SSLeay::PEM->read_bio_PrivateKey($bio);
      
      unless ($evp_pkey is_type Net::SSLeay::EVP_PKEY) {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method EVP : int () {
    
    {
      my $md = Net::SSLeay::EVP->sha1;
      
      unless ($md is_type Net::SSLeay::EVP_MD) {
        return 0;
      }
    }
    
    {
      my $md = Net::SSLeay::EVP->sha256;
      
      unless ($md is_type Net::SSLeay::EVP_MD) {
        return 0;
      }
    }
    
    {
      my $md = Net::SSLeay::EVP->sha512;
      
      unless ($md is_type Net::SSLeay::EVP_MD) {
        return 0;
      }
    }
    
    {
      my $md = Net::SSLeay::EVP->get_digestbyname("sha512");
      
      unless ($md is_type Net::SSLeay::EVP_MD) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method OPENSSL_INIT : int () {
    
    {
      my $init_setting = Net::SSLeay::OPENSSL_INIT->new;
      
      unless ($init_setting is_type Net::SSLeay::OPENSSL_INIT_SETTINGS) {
        return 0;
      }
      
      {
        eval  {Net::SSLeay::OPENSSL_INIT->set_config_filename(undef, undef); }
        
        if ($@ && eval_error_id isa_error Error::NotSupported) {
          warn "[Skip]Skip tests for Net::SSLeay::OPENSSL_INIT#set_config_filename method.";
        }
        else {
          Net::SSLeay::OPENSSL_INIT->set_config_filename($init_setting, "foo.config");
        }
      }
      
      {
        eval  {Net::SSLeay::OPENSSL_INIT->set_config_file_flags(undef, 0); }
        
        if ($@ && eval_error_id isa_error Error::NotSupported) {
          warn "[Skip]Skip tests for Net::SSLeay::OPENSSL_INIT#set_config_file_flags method.";
        }
        else {
          Net::SSLeay::OPENSSL_INIT->set_config_file_flags($init_setting, 0);
        }
      }
      
      {
        eval  {Net::SSLeay::OPENSSL_INIT->set_config_appname(undef, undef); }
        
        if ($@ && eval_error_id isa_error Error::NotSupported) {
          warn "[Skip]Skip tests for Net::SSLeay::OPENSSL_INIT#set_config_appname method.";
        }
        else {
          Net::SSLeay::OPENSSL_INIT->set_config_appname($init_setting, "foo");
        }
      }
    }
    
    return 1;
  }
  
  static method OPENSSL : int () {
    
    Net::SSLeay::OPENSSL->add_ssl_algorithms;
    
    Net::SSLeay::OPENSSL->add_all_algorithms;
    
    Net::SSLeay::OPENSSL->init_crypto(SSL->OPENSSL_INIT_NO_ADD_ALL_CIPHERS | SSL->OPENSSL_INIT_NO_ADD_ALL_DIGESTS, undef);
                    
    my $init_setting = Net::SSLeay::OPENSSL_INIT->new;
    
    Net::SSLeay::OPENSSL->init_ssl(0, $init_setting);
    
    return 1;
  }
  
  static method PKCS12 : int () {
    
    {
      my $pkcs12 = Net::SSLeay::PKCS12->new;
      
      unless ($pkcs12 is_type Net::SSLeay::PKCS12) {
        return 0;
      }
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/simple-cert.enc.p12", "rb");
      
      my $pkcs12 = Net::SSLeay::DER->d2i_PKCS12_bio($bio);
      
      unless ($pkcs12 is_type Net::SSLeay::PKCS12) {
        return 0;
      }
      
      my $pass = (string)"test";
      my $pkey_ref = new Net::SSLeay::EVP_PKEY[1];
      my $cert_ref = new Net::SSLeay::X509[1];
      
      $pkcs12->parse($pass, $pkey_ref, $cert_ref);
      
      unless ($pkey_ref->[0] isa Net::SSLeay::EVP_PKEY) {
        return 0;
      }
      
      my $subject_name = $cert_ref->[0]->get_subject_name;
      
      unless (Fn->contains($subject_name->oneline, "/C=PL/O=Net-SSLeay/OU=Test Suite/CN=simple-cert.net-ssleay.example")) {
        return 0;
      }
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/simple-cert.enc.p12", "rb");
      
      my $pkcs12 = Net::SSLeay::DER->d2i_PKCS12_bio($bio);
      
      unless ($pkcs12 is_type Net::SSLeay::PKCS12) {
        return 0;
      }
      
      my $pass = (string)"test";
      my $pkey_ref = new Net::SSLeay::EVP_PKEY[1];
      my $cert_ref = new Net::SSLeay::X509[1];
      my $csa_ref = new Net::SSLeay::X509[][1];
      
      $pkcs12->parse($pass, $pkey_ref, $cert_ref, $csa_ref);
      
      unless ($pkey_ref->[0] isa Net::SSLeay::EVP_PKEY) {
        return 0;
      }
      
      unless (Fn->contains($cert_ref->[0]->get_subject_name->oneline, "/C=PL/O=Net-SSLeay/OU=Test Suite/CN=simple-cert.net-ssleay.example")) {
        return 0;
      }
      
      unless (@{$csa_ref->[0]} == 0) {
        return 0;
      }
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/simple-cert.certchain.enc.p12", "rb");
      
      my $pkcs12 = Net::SSLeay::DER->d2i_PKCS12_bio($bio);
      
      unless ($pkcs12 is_type Net::SSLeay::PKCS12) {
        return 0;
      }
      
      my $pass = (string)"test";
      my $pkey_ref = new Net::SSLeay::EVP_PKEY[1];
      my $cert_ref = new Net::SSLeay::X509[1];
      my $csa_ref = new Net::SSLeay::X509[][1];
      
      $pkcs12->parse($pass, $pkey_ref, $cert_ref, $csa_ref);
      
      unless ($pkey_ref->[0] isa Net::SSLeay::EVP_PKEY) {
        return 0;
      }
      
      unless (Fn->contains($cert_ref->[0]->get_subject_name->oneline, "/C=PL/O=Net-SSLeay/OU=Test Suite/CN=simple-cert.net-ssleay.example")) {
        return 0;
      }
      
      unless (@{$csa_ref->[0]} == 2) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method X509_VERIFY_PARAM : int () {
    
    {
      my $param = Net::SSLeay::X509_VERIFY_PARAM->new;
      
      unless ($param is_type Net::SSLeay::X509_VERIFY_PARAM) {
        return 0;
      }
      
      $param->set_flags(SSL->X509_V_FLAG_CRL_CHECK);
      
      {
        my $flags = $param->get_flags;
        
        unless ($flags & SSL->X509_V_FLAG_CRL_CHECK) {
          return 0;
        }
      }
      
      {
        $param->clear_flags(SSL->X509_V_FLAG_CRL_CHECK);
        
        my $flags = $param->get_flags;
        
        if ($flags & SSL->X509_V_FLAG_CRL_CHECK) {
          return 0;
        }
      }
      
      $param->set_hostflags(SSL->X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT);
      
      {
        my $hostflags = $param->get_hostflags;
        
        unless ($hostflags & SSL->X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT) {
          return 0;
        }
      }
      
      $param->set1_host("foo.com");
      
      $param->set1_ip_asc("127.0.0.1");
      
      $param->set1_email("kimoto@foo.com");
      
    }
    
    return 1;
  }
  
  static method X509_NAME : int () {
    
    {
      my $x509_name_entry = Net::SSLeay::X509_NAME_ENTRY->new;
      
      unless ($x509_name_entry is_type Net::SSLeay::X509_NAME_ENTRY) {
        return 0;
      }
    }
    
    {
      my $x509_name = Net::SSLeay::X509_NAME->new;
      
      unless ($x509_name is_type Net::SSLeay::X509_NAME) {
        return 0;
      }
      
      $x509_name->add_entry_by_NID(Net::SSLeay::OBJ->txt2nid("C"), SSL->MBSTRING_ASC, "UK");
      
      $x509_name->add_entry_by_NID(Net::SSLeay::OBJ->txt2nid("CN"), SSL->MBSTRING_ASC, "Joe Bloggs");
      
      unless ($x509_name->oneline eq "/C=UK/CN=Joe Bloggs") {
        return 0;
      }
      
      unless ($x509_name->entry_count == 2) {
        return 0;
      }
      
      {
        my $x509_name_etnry = $x509_name->get_entry(0);
        
        unless ($x509_name_etnry is_type Net::SSLeay::X509_NAME_ENTRY) {
          return 0;
        }
        
        unless ($x509_name_etnry->get_data->get0_data eq "UK") {
          return 0;
        }
        
        unless (Net::SSLeay::OBJ->obj2nid($x509_name_etnry->get_object) == Net::SSLeay::OBJ->txt2nid("C")) {
          return 0;
        }
      }
      
      {
        my $x509_name_etnry = $x509_name->delete_entry(1);
        
        unless ($x509_name_etnry is_type Net::SSLeay::X509_NAME_ENTRY) {
          return 0;
        }
        
        unless ($x509_name_etnry->get_data->get0_data eq "Joe Bloggs") {
          return 0;
        }
        
        unless (Net::SSLeay::OBJ->obj2nid($x509_name_etnry->get_object) == Net::SSLeay::OBJ->txt2nid("CN")) {
          return 0;
        }
        
        unless ($x509_name->entry_count == 1) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method X509_CRL : int () {
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/intermediate-ca.crl.pem", "r");
      
      my $x509_crl = Net::SSLeay::PEM->read_bio_X509_CRL($bio);
      
      unless ($x509_crl is_type Net::SSLeay::X509_CRL) {
        return 0;
      }
      
      my $x509_revokeds = $x509_crl->get_REVOKED;
      
      unless (@$x509_revokeds == 1) {
        return 0;
      }
      
      my $x509_revoked = $x509_revokeds->[0];
      
      my $serialNumber = $x509_revoked->get0_serialNumber;
      
      my $serialNumber_long = $serialNumber->get_int64;
      
      unless ($serialNumber_long == 5) {
        return 0;
      }
      
      my $revocationDate = $x509_revoked->get0_revocationDate;
      
      my $revocationDate_bio = Net::SSLeay::BIO->new;
      
      $revocationDate->print($revocationDate_bio);
      
      my $revocationDate_string = (mutable string)new_string_len 255;
      
      my $read_length = $revocationDate_bio->read($revocationDate_string);
      
      Fn->shorten($revocationDate_string, $read_length);
      
      unless ($revocationDate_string eq "Jun  6 06:06:06 2020 GMT") {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method X509_EXTENSION : int () {
    
    {
      my $x509_ext = Net::SSLeay::X509_EXTENSION->new;
      
      unless ($x509_ext is_type Net::SSLeay::X509_EXTENSION) {
        return 0;
      }
      
      $x509_ext->set_object(Net::SSLeay::OBJ->nid2obj(Net::SSLeay::OBJ->txt2nid("C")));
      
      unless (Net::SSLeay::OBJ->obj2nid($x509_ext->get_object) == Net::SSLeay::OBJ->txt2nid("C")) {
        return 0;
      }
      
      $x509_ext->set_critical(1);
      
      unless ($x509_ext->get_critical == 1) {
        return 0;
      }
      
      my $data = Net::SSLeay::ASN1_OCTET_STRING->new;
      $data->set("ABC");
      
      $x509_ext->set_data($data);
      
      unless ($x509_ext->get_data->get0_data eq "ABC") {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method X509 : int () {
    
    {
      my $x509 = Net::SSLeay::X509->new;
      
      unless ($x509 is_type Net::SSLeay::X509) {
        return 0;
      }
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/simple-cert.cert.pem", "r");
      
      my $x509 = Net::SSLeay::PEM->read_bio_X509($bio);
      
      unless ($x509 is_type Net::SSLeay::X509) {
        return 0;
      }
      
      my $serialNumber = $x509->get_serialNumber;
      
      unless ($serialNumber->get_int64 == 1) {
        return 0;
      }
      my $issuer_name = $x509->get_issuer_name;
      
      unless ($issuer_name is_type Net::SSLeay::X509_NAME) {
        return 0;
      }
      
      unless ($issuer_name->oneline eq "/C=PL/O=Net-SSLeay/OU=Test Suite/CN=Intermediate CA") {
        return 0;
      }
      
      my $subject_name = $x509->get_subject_name;
      
      unless ($subject_name is_type Net::SSLeay::X509_NAME) {
        return 0;
      }
      
      unless ($subject_name->oneline eq "/C=PL/O=Net-SSLeay/OU=Test Suite/CN=simple-cert.net-ssleay.example") {
        return 0;
      }
      
      my $sha1_digest = Net::SSLeay::EVP->get_digestbyname("sha1");
      
      my $pubkey_digest = $x509->pubkey_digest_return_string($sha1_digest);
      
      unless (Array->equals_byte((byte[])$pubkey_digest, [(byte)-7, 125, -9, 111, -37, -33, 64, -29, -92, -79, 35, -72, -95, 23, 101, -119, -4, 122, 91, -11])) {
        return 0;
      }
      
      my $digest = $x509->digest_return_string($sha1_digest);
      
      my $digest_expected = [(byte)
        -100,
        46,
        -112,
        -71,
        -89,
        -124,
        122,
        58,
        43,
        -66,
        -3,
        -91,
        -47,
        70,
        -22,
        49,
        117,
        -23,
        3,
        38
      ];
      
      unless (Array->equals_byte((byte[])$digest, $digest_expected)) {
        return 0;
      }
      
      my $x509_dup = $x509->dup;
      
      if ($x509 == $x509_dup) {
        return 0;
      }
      
      unless ($x509_dup->get_serialNumber->get_int64 == $x509->get_serialNumber->get_int64) {
        return 0;
      }
      
    }
    
    {
      my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/extended-cert.cert.pem", "r");
      
      my $x509 = Net::SSLeay::PEM->read_bio_X509($bio);
      
      unless ($x509 is_type Net::SSLeay::X509) {
        return 0;
      }
      
      my $subjectAltNames = $x509->get_subjectAltNames;
      
      unless ($subjectAltNames is_type Net::SSLeay::GENERAL_NAME[]) {
        return 0;
      }

=begin comment

# define GEN_OTHERNAME   0
# define GEN_EMAIL       1
# define GEN_DNS         2
# define GEN_X400        3
# define GEN_DIRNAME     4
# define GEN_EDIPARTY    5
# define GEN_URI         6
# define GEN_IPADD       7
# define GEN_RID         8

=end comment

=cut

      unless (@$subjectAltNames == 7) {
        return 0;
      }
      
      unless ($subjectAltNames->[0]->get_type == SSL->GEN_EMAIL) {
        return 0;
      }
      
      unless ($subjectAltNames->[0]->get_data_as_string eq "john.doe@net-ssleay.example") {
        return 0;
      }
      
      unless ($subjectAltNames->[1]->get_type == SSL->GEN_URI) {
        return 0;
      }
      
      unless ($subjectAltNames->[1]->get_data_as_string eq "http://johndoe.net-ssleay.example") {
        return 0;
      }
      
      unless ($subjectAltNames->[2]->get_type == SSL->GEN_DNS) {
        return 0;
      }
      
      unless ($subjectAltNames->[2]->get_data_as_string eq "johndoe.net-ssleay.example") {
        return 0;
      }
      
      unless ($subjectAltNames->[3]->get_type == SSL->GEN_RID) {
        return 0;
      }
      
      unless ($subjectAltNames->[3]->get_data_as_string eq "1.2.3.4") {
        return 0;
      }
      
      unless ($subjectAltNames->[4]->get_type == SSL->GEN_IPADD) {
        return 0;
      }
      
      unless ($subjectAltNames->[4]->get_data_as_string eq "\x{C0}\x{A8}\x{00}\x{02}") {
        return 0;
      }
      
      unless ($subjectAltNames->[5]->get_type == SSL->GEN_IPADD) {
        return 0;
      }
      
      unless ($subjectAltNames->[5]->get_data_as_string eq "\x{FD}%\x{F8}\x{14}\x{AF}\x{B5}\x{98}s\x{00}\x{00}\x{00}\x{00}\x{00}\x{00}\x{00}\x{02}") {
        return 0;
      }
      
      unless ($subjectAltNames->[6]->get_type == SSL->GEN_OTHERNAME) {
        return 0;
      }
      
      unless ($subjectAltNames->[6]->get_data_as_string eq "jd@net-ssleay.example") {
        return 0;
      }
      
      my $ext_count = $x509->get_ext_count;
      
      unless ($ext_count == 10) {
        return 0;
      }
      
      my $ext_loc = $x509->get_ext_by_NID(SSL->NID_ext_key_usage);
      my $ext = $x509->get_ext($ext_loc);
      
      unless ($ext is_type Net::SSLeay::X509_EXTENSION) {
        return 0;
      }
      
      unless (Net::SSLeay::OBJ->obj2nid($ext->get_object) == SSL->NID_ext_key_usage) {
        return 0;
      }
      
      my $issued = Net::SSLeay::X509->check_issued($x509, $x509);
    }
    
    return 1;
  }
  
  static method X509_STORE : int () {
    
    {
      my $x509_store = Net::SSLeay::X509_STORE->new;
      
      unless ($x509_store is_type Net::SSLeay::X509_STORE) {
        return 0;
      }
      
      $x509_store->set_flags(SSL->X509_V_FLAG_CRL_CHECK);
      
      {
        my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/simple-cert.cert.pem", "r");
        
        my $x509 = Net::SSLeay::PEM->read_bio_X509($bio);
        
        unless ($x509 is_type Net::SSLeay::X509) {
          return 0;
        }
        
        $x509_store->add_cert($x509);
      }
      
      {
        my $bio = Net::SSLeay::BIO->new_file("$FILE_DIR/intermediate-ca.crl.pem", "r");
        
        my $x509_crl = Net::SSLeay::PEM->read_bio_X509_CRL($bio);
        
        unless ($x509_crl is_type Net::SSLeay::X509_CRL) {
          return 0;
        }
        
        $x509_store->add_crl($x509_crl);
      }
    }
    
    return 1;
  }
  
}
