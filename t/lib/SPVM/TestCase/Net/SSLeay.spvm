class TestCase::Net::SSLeay {
  use IO::Socket::IP;
  use Net::SSLeay;
  use Net::SSLeay::SSL_CTX;
  use Net::SSLeay::SSL_METHOD;
  use Net::SSLeay::Constant as SSL;
  use Net::SSLeay::ERR;
  use Net::SSLeay::BIO;
  use Net::SSLeay::PEM;
  use StringBuffer;
  use Mozilla::CA;
  use Sys::Signal::Constant as SIGNAL;
  use Net::SSLeay::Error;
  
  static method test : int () {
    
    my $version = SSL->OPENSSL_VERSION_TEXT;
    
    warn "[Test Output]OpenSSL version:$version";
    
    # Socket
    my $host = "www.google.com";
    my $port = 443;
    my $socket = IO::Socket::IP->new({PeerAddr => $host, PeerPort => $port});
    
    my $ssl_method = Net::SSLeay::SSL_METHOD->SSLv23_client_method;
    
    my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
    
    $ssl_ctx->set_verify(SSL->SSL_VERIFY_PEER);
    
    $ssl_ctx->set_default_verify_paths;
    
    my $ca = Mozilla::CA->SSL_ca;
    
    my $bio = Net::SSLeay::BIO->new;
    
    $bio->write($ca);
    
    my $x509 = Net::SSLeay::PEM->read_bio_X509($bio);
    
    my $x509_store = $ssl_ctx->get_cert_store;
    
    $x509_store->add_cert($x509);
    
    my $verify_param = $ssl_ctx->get0_param;
    
    $verify_param->set_hostflags(SSL->X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);
    
    $verify_param->set1_host($host);
    
    my $ssl = Net::SSLeay->new($ssl_ctx);
    
    my $socket_fileno = $socket->fileno;
    
    $ssl->set_fd($socket_fileno);
    
    $ssl->set_tlsext_host_name($host);
    
    my $timeout = 0;
    
    while (1) {
      eval { $ssl->connect; }
      
      if ($@) {
        my $again = Sys::Socket::Errno->is_connect_again(Sys::Socket::Errno->errno);
        
        if ($again) {
          Go->gosched_io_write($socket_fileno, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    my $send_buffer = "GET / HTTP/1.0\r\n\r\n";
    $ssl->write($send_buffer);
    
    my $buffer = StringBuffer->new;
    
    my $recv_buffer = (mutable string)new_string_len 100;
    while (1) {
      my $recv_length = &read($ssl, $socket_fileno, 0, $recv_buffer);
      
      if ($recv_length > 0) {
        $buffer->push($recv_buffer, 0, $recv_length);
        # print $recv_buffer;
      }
      
      if ($recv_length < 0) {
        die "Read error";
      }
      
      if ($recv_length < length $recv_buffer) {
        last;
      }
    }
    
    my $shutdown_ret = $ssl->shutdown;
    
    $socket->close;
    
    unless (Fn->contains($buffer->to_string, "google.com")) {
      return 0;
    }
    
    return 1;
  }
  
  static method read : int ($ssl : Net::SSLeay, $fd : int, $timeout : int, $buffer : mutable string, $length : int = -1, $offset : int = 0) {
    
    my $read_length = -1;
    while (1) {
      eval { $read_length = $ssl->read($buffer, $length, $offset); }
      
      if ($@) {
        my $again = Sys::Socket::Errno->is_read_again(Sys::Socket::Errno->errno);
        
        if ($again) {
          Go->gosched_io_read($fd, $timeout);
          next;
        }
        else {
          die $@;
        }
      }
      else {
        last;
      }
    }
    
    return $read_length;
  }
  
}
