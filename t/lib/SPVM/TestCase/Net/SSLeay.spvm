class TestCase::Net::SSLeay {
  use IO::Socket::INET;
  use Net::SSLeay;
  use Net::SSLeay::SSL_CTX;
  use Net::SSLeay::SSL_METHOD;
  use Net::SSLeay::Constant as SSL;
  use Net::SSLeay::ERR;
  use StringBuffer;
  
  static method test : int () {
    
    Net::SSLeay->foo;
    
    # Socket
    my $host = "www.google.com";
    my $port = 443;
    my $socket = IO::Socket::INET->new({PeerAddr => $host, PeerPort => $port});
    
    my $ssl_method = Net::SSLeay::SSL_METHOD->SSLv23_client_method;
    
    my $ssl_ctx = Net::SSLeay::SSL_CTX->new($ssl_method);
    
    $ssl_ctx->set_verify(SSL->SSL_VERIFY_PEER);
    
    $ssl_ctx->set_default_verify_paths;
    
    my $verify_param = $ssl_ctx->get0_param;
    
    $verify_param->set_hostflags(SSL->X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS);
    
    $verify_param->set1_host($host);
    
    my $ssl = Net::SSLeay->new($ssl_ctx);
    
    my $socket_fileno = $socket->fileno;
    
    $ssl->set_fd($socket_fileno);
    
    $ssl->set_tlsext_host_name($host);
    
    eval { $ssl->connect; }
    
    if ($@) {
      
      my $return_code = $ssl->return_code;
      
      my $ssl_error = $ssl->get_error($return_code);
      
      my $ssl_error_message = Net::SSLeay::ERR->error_string($ssl_error);
      
      die $ssl_error_message;
    }
    
    my $send_buffer = "GET / HTTP/1.0\r\n\r\n";
    $ssl->write($send_buffer);
    
    my $buffer = StringBuffer->new;
    
    my $recv_buffer = (mutable string)new_string_len 100;
    while (1) {
      my $recv_length = $ssl->read($recv_buffer);
      
      if ($recv_length > 0) {
        $buffer->push($recv_buffer, 0, $recv_length);
        # print $recv_buffer;
      }
      
      if ($recv_length < 0) {
        die "Read error";
      }
      
      if ($recv_length < length $recv_buffer) {
        last;
      }
    }
    
    $ssl->shutdown;
    
    $socket->close;
    
    unless (Fn->contains($buffer->to_string, "google.com")) {
      return 0;
    }
    
    return 1;
  }
}
