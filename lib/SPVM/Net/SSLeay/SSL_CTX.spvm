# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Net::SSLeay::SSL_CTX : pointer {
  
  use Net::SSLeay::Error;
  
  use Net::SSLeay::SSL_METHOD;
  use Net::SSLeay::X509_STORE;
  use Net::SSLeay::X509_NAME;
  use Net::SSLeay::X509_VERIFY_PARAM;
  use Net::SSLeay::EC_KEY;
  use Net::SSLeay::DH;
  use Net::SSLeay::EVP_PKEY;
  use Net::SSLeay::EVP_CIPHER_CTX;
  use Net::SSLeay::HMAC_CTX;
  use List;
  
  use Net::SSLeay::Callback::TlsextServername;
  use Net::SSLeay::Callback::TlsextStatus;
  use Net::SSLeay::Callback::PemPasswd;
  use Net::SSLeay::Callback::PskClient;
  use Net::SSLeay::Callback::PskServer;
  use Net::SSLeay::Callback::TlsextTicketKey;
  use Net::SSLeay::Callback::AlpnSelect;
  use Net::SSLeay::Callback::NewSession;
  use Net::SSLeay::Callback::RemoveSession;
  use Net::SSLeay::Callback::Msg;
  
  use Net::SSLeay::Callback::AlpnSelect; 
  use Net::SSLeay::Callback::NextProtoSelect;
  use Net::SSLeay::Callback::NextProtosAdvertised;
  
  use Sync::Mutex;
  use StringList;
  
  # Class Variables
  our $PSK_CLIENT_CBS : Hash of Net::SSLeay::Callback::PskClient;
  
  our $PSK_SERVER_CBS : Hash of Net::SSLeay::Callback::PskServer;
  
  our $TLSEXT_TICKET_KEY_CBS : Hash of Net::SSLeay::Callback::TlsextTicketKey;
  
  our $NEW_SESSION_CBS : Hash of Net::SSLeay::Callback::NewSession;
  
  our $REMOVE_SESSION_CBS : Hash of Net::SSLeay::Callback::RemoveSession;
  
  our $MUTEX : Sync::Mutex;
  
  INIT {
    $PSK_CLIENT_CBS = Hash->new;
    
    $PSK_SERVER_CBS = Hash->new;
    
    $TLSEXT_TICKET_KEY_CBS = Hash->new;
    
    $NEW_SESSION_CBS = Hash->new;
    
    $REMOVE_SESSION_CBS = Hash->new;
    
    $MUTEX = Sync::Mutex->new;
  }
  
  # Fields
  has pkeys_list : List of Net::SSLeay::EVP_PKEY;
  
  has cb_output_strings_list : StringList; # For SSL_CTX_set_alpn_select_cb, SSL_CTX_set_next_proto_select_cb
  
  # Class Methods
  native static method new : Net::SSLeay::SSL_CTX ($method : Net::SSLeay::SSL_METHOD);
  
  protected method init : void ($options : object[] = undef) {
    
    my $pkeys_list = List->new(new Net::SSLeay::EVP_PKEY[0]);
    $self->{pkeys_list} = $pkeys_list;
    
    my $cb_output_strings_list = StringList->new;
    $self->{cb_output_strings_list} = $cb_output_strings_list;
  }
  
  # Instance Methods
  native method set_mode : long ($mode : long);
  
  native method set_verify : void ($mode : int);
  
  native method get0_param : Net::SSLeay::X509_VERIFY_PARAM ();
  
  native method load_verify_locations : int ($path : string);
  
  native method set_default_verify_paths : int ();
  
  native method use_certificate_file : int ($file : string, $type : int);
  
  native method use_certificate_chain_file : int ($file : string);
  
  native method use_PrivateKey_file : int ($file : string, $type : int);
  
  native method set_cipher_list : int ($str : string);
  
  native method set_ciphersuites : int ($str : string);
  
  native method get_cert_store : Net::SSLeay::X509_STORE ();
  
  native method set_options : long ($options : long);
  
  native method get_options : long ();
  
  native method clear_options : long ($options : long);
  
  native method set_alpn_protos : int ($protos : string, $protos_len : int = -1);
  
  native method set_alpn_protos_with_protocols : int ($protocols : string[]);
  
  native method set_tmp_ecdh : long ($ecdh : Net::SSLeay::EC_KEY);
  
  native method set1_groups_list : int ($list : string);
  
  native method set1_curves_list : int ($list : string);
  
  native method set_session_cache_mode : long ($mode : long);
  
  native method set_ecdh_auto : long ($state : int);
  
  native method set_tmp_dh : long ($dh : Net::SSLeay::DH);
  
  native method set_post_handshake_auth : void ($val : int);
  
  native method use_PrivateKey : int ($pkey : Net::SSLeay::EVP_PKEY);
  
  native method set_session_id_context : int ($sid_ctx : string, $sid_ctx_len : int = -1);
  
  native method set_min_proto_version : int ($version : int);
  
  native method set_client_CA_list : void ($list : Net::SSLeay::X509_NAME[]);
  
  native method add_client_CA : int ($cacert : Net::SSLeay::X509);
  
  native method add_extra_chain_cert : long ($x509 : Net::SSLeay::X509);
  
  native method set_tlsext_servername_callback : long ($cb : Net::SSLeay::Callback::TlsextServername, $arg : object = undef);
  
  native method set_tlsext_status_cb : long ($cb : Net::SSLeay::Callback::TlsextStatus, $arg : object = undef);
  
  native method set_default_passwd_cb : void ($cb : Net::SSLeay::Callback::PemPasswd, $arg : object = undef);
  
  native method set_psk_client_callback : void ($cb : Net::SSLeay::Callback::PskClient);
  
  private method GET_PSK_CLIENT_CB : Net::SSLeay::Callback::PskClient ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->reader_unlock;
    });
    
    $MUTEX->reader_lock;
    
    my $psk_client_cb = (Net::SSLeay::Callback::PskClient)$PSK_CLIENT_CBS->get($key);
    
    return $psk_client_cb;
  }
  
  private method SET_PSK_CLIENT_CB : void ($key : string, $psk_client_cb : Net::SSLeay::Callback::PskClient) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    $PSK_CLIENT_CBS->set($key, $psk_client_cb);
  }
  
  private method DELETE_PSK_CLIENT_CB : Net::SSLeay::Callback::PskClient ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    my $deleted = (Net::SSLeay::Callback::PskClient)$PSK_CLIENT_CBS->delete($key);
    
    return $deleted;
  }
  
  native method set_psk_server_callback : void ($cb : Net::SSLeay::Callback::PskServer);
  
  private method GET_PSK_SERVER_CB : Net::SSLeay::Callback::PskServer ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->reader_unlock;
    });
    
    $MUTEX->reader_lock;
    
    my $psk_server_cb = (Net::SSLeay::Callback::PskServer)$PSK_SERVER_CBS->get($key);
    
    return $psk_server_cb;
  }
  
  private method SET_PSK_SERVER_CB : void ($key : string, $psk_server_cb : Net::SSLeay::Callback::PskServer) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    $PSK_SERVER_CBS->set($key, $psk_server_cb);
  }
  
  private method DELETE_PSK_SERVER_CB : Net::SSLeay::Callback::PskServer ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    my $deleted = (Net::SSLeay::Callback::PskServer)$PSK_SERVER_CBS->delete($key);
    
    return $deleted;
  }
  
  native method set_tlsext_ticket_key_cb : void ($cb : Net::SSLeay::Callback::TlsextTicketKey);
  
  private method GET_TLSEXT_TICKET_KEY_CB : Net::SSLeay::Callback::TlsextTicketKey ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->reader_unlock;
    });
    
    $MUTEX->reader_lock;
    
    my $psk_server_cb = (Net::SSLeay::Callback::TlsextTicketKey)$TLSEXT_TICKET_KEY_CBS->get($key);
    
    return $psk_server_cb;
  }
  
  private method SET_TLSEXT_TICKET_KEY_CB : void ($key : string, $psk_server_cb : Net::SSLeay::Callback::TlsextTicketKey) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    $TLSEXT_TICKET_KEY_CBS->set($key, $psk_server_cb);
  }
  
  private method DELETE_TLSEXT_TICKET_KEY_CB : Net::SSLeay::Callback::TlsextTicketKey ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    my $deleted = (Net::SSLeay::Callback::TlsextTicketKey)$TLSEXT_TICKET_KEY_CBS->delete($key);
    
    return $deleted;
  }
  
  native method set_alpn_select_cb_with_protocols : void ($protocols : string[]);
  
  native method set_next_proto_select_cb_with_protocols : void ($protocols : string[]);
  
  native method set_next_protos_advertised_cb_with_protocols : void ($protocols : string[]);
  
  native method sess_set_new_cb : void ($cb : Net::SSLeay::Callback::NewSession);
  
  private method GET_NEW_SESSION_CB : Net::SSLeay::Callback::NewSession ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->reader_unlock;
    });
    
    $MUTEX->reader_lock;
    
    my $psk_server_cb = (Net::SSLeay::Callback::NewSession)$NEW_SESSION_CBS->get($key);
    
    return $psk_server_cb;
  }
  
  private method SET_NEW_SESSION_CB : void ($key : string, $psk_server_cb : Net::SSLeay::Callback::NewSession) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    $NEW_SESSION_CBS->set($key, $psk_server_cb);
  }
  
  private method DELETE_NEW_SESSION_CB : Net::SSLeay::Callback::NewSession ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    my $deleted = (Net::SSLeay::Callback::NewSession)$NEW_SESSION_CBS->delete($key);
    
    return $deleted;
  }
  
  native method sess_set_remove_cb : void ($cb : Net::SSLeay::Callback::NewSession);
  
  private method GET_REMOVE_SESSION_CB : Net::SSLeay::Callback::RemoveSession ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->reader_unlock;
    });
    
    $MUTEX->reader_lock;
    
    my $psk_server_cb = (Net::SSLeay::Callback::RemoveSession)$REMOVE_SESSION_CBS->get($key);
    
    return $psk_server_cb;
  }
  
  private method SET_REMOVE_SESSION_CB : void ($key : string, $psk_server_cb : Net::SSLeay::Callback::RemoveSession) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    $REMOVE_SESSION_CBS->set($key, $psk_server_cb);
  }
  
  private method DELETE_REMOVE_SESSION_CB : Net::SSLeay::Callback::RemoveSession ($key : string) {
    
    Fn->defer(method : void () {
      $MUTEX->unlock;
    });
    
    $MUTEX->lock;
    
    my $deleted = (Net::SSLeay::Callback::RemoveSession)$REMOVE_SESSION_CBS->delete($key);
    
    return $deleted;
  }
  
  native method DESTROY : void ();
  
}
